""" create_pred_candidates.py.
Create a prediction label TSV file whose columns are {spec_file_name}, {parentmass}, {cand_formula}, {cand_ion}, {cand_mono_mass}, and {parentmass}.

This is to mimic the user of neural models to specifing their input
The scenario is that the user have possible candidate formula with this specific adduct 
specified for certain unlabeled MS2 files
    user provides --new-decoy-label with a prediction tsv file 
    whose 'spec_file_name' column contains the unlabelled MS2 file names 
    and 'cand_formula' column & 'cand_adduct' columns 
    containing possible candidate formula with this specific adduct

The generated pred-label TSV file will be used for the PredDataset

Usage of create_pred_candidates.py:
The scenario is that the user have a full dataset for train-val-test and the user want
to get pred candidates for the test data
    step1: user provides --decoy-label with decoy label generated by
           running add_formula_decoys_by_adduct.py
    step2: user provides --split-file with the corresponding split file

"""

import pandas as pd
from pathlib import Path
import argparse
from mist_cf import common
import time


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--decoy-label",
        default="data/nist_canopus/label_decoy_RDBE.tsv",
        help="Path to decoy label",
    )
    parser.add_argument(
        "--split-file",
        default="data/canopus_train/splits/canopus_test_0.3_val_0.1_22.tsv",
        help="Path to split file",
    )
    parser.add_argument(
        "--save-dir", default=None, help="Save path specified by the user"
    )
    parser.add_argument("--out-name", default=None, help="out name")
    parser.add_argument(
        "--data-dir", default="data/canopus_train", help="Path to data directory"
    )
    parser.add_argument(
        "--debug", action="store_true", default=False, help="Debug flag"
    )
    return parser.parse_args()


def main():
    """main."""
    args = get_args()
    decoy_label_file = Path(args.decoy_label)
    split_file = Path(args.split_file)
    out_name = args.out_name
    save_dir = args.save_dir
    debug = args.debug

    if args.save_dir is None:
        save_dir = Path(args.data_dir) / "pred_labels"
    else:
        save_dir = Path(args.save_dir)
    save_dir.mkdir(exist_ok=True)

    if out_name is None:
        out_name = f"pred_{split_file.stem}_{decoy_label_file.stem}.tsv"

    save_path = save_dir / out_name
    decoy_label_df = pd.read_csv(decoy_label_file, sep="\t")
    split_df = pd.read_csv(split_file, sep="\t")
    test_spec_names = split_df[split_df["Fold_0"] == "test"]["spec"].to_list()

    decoy_label_df = decoy_label_df[decoy_label_df["spec"].isin(test_spec_names)]
    if debug:
        decoy_label_df = decoy_label_df[:10]

    all_outs = []
    total_cnt = 0
    no_decoy_cnt = 0
    for obj in decoy_label_df[
        [
            "spec",
            "formula",
            "ionization",
            "parentmass",
            "decoy_formulae",
            "decoy_ions",
            "instrument",
        ]
    ].values:
        spec_name = obj[0]
        true_form = obj[1]
        true_ion = obj[2]
        parentmass = obj[3]
        decoy_forms = obj[4]
        decoy_ions = obj[5]
        instrument = obj[6]

        total_cnt += 1
        if not isinstance(decoy_forms, str):
            no_decoy_cnt += 1
        else:
            decoy_forms, decoy_ions = decoy_forms.split(","), decoy_ions.split(",")
            decoy_forms.append(true_form)
            decoy_ions.append(true_ion)
            for decoy_form, decoy_ion in zip(decoy_forms, decoy_ions):
                new_obj = {
                    "spec": spec_name,
                    "cand_form": decoy_form,
                    "cand_ion": decoy_ion,
                    "parentmass": parentmass,
                    "instrument": instrument,
                }
                all_outs.append(new_obj)

    output_df = pd.DataFrame(all_outs)

    print(f"There are {total_cnt} specs in total")
    print(f"There are {no_decoy_cnt} specs does not have decoys after filtering")
    print(f"There are {output_df.shape[0]} candidates in this pred label!")
    print(f"Save to: {save_path}")
    output_df.to_csv(save_path, sep="\t", index=None)


if __name__ == "__main__":
    start_time = time.time()
    main()
    end_time = time.time()
    print(f"Program finished in: {end_time - start_time} seconds")
